--/ wpn_explode_fx.script /--
--/ Weapon explode module /--
--/ OGS Evolution Team 2010 /--
--/ version 1.4 (12/03/2011) /--

--/ Модуль подрыва патрона в стволе при значительном износе оружия /--


-- Параметры
local fx_is_enable = true									-- "true"-обработка подрыва патрона включена, "false"-выключена
local wpn_is_jammed = false

-- Малый калибр (пистолеты, пистолеты-пулемёты)
local fx_snd_1 = "weapons\\wpn_explode"						-- звук, воспроизводимый как разрыв патрона в стволе
local fx_particle_1 = "1935\\explosion_01b_hot"				-- партикл, воспроизводимый как разрыв патрона в стволе
local explode_impulse_1 = 0.1								-- импульс хита, наносимого при разрыве
local explode_power_1 = 0.4									-- сила хита, наносимого при разрыве

-- Средний калибр (автоматы, пулемёты, винтовки)
local fx_snd_2 = "weapons\\wpn_explode"
local fx_particle_2 = "1935\\explosion_01b_hot"
local explode_impulse_2 = 0.2
local explode_power_2 = 0.6

-- Большой калибр (дробовики, крупнокалиберные винтовки)
local fx_snd_3 = "weapons\\wpn_explode"
local fx_particle_3 = "1935\\explosion_01b_hot"
local explode_impulse_3 = 0.3
local explode_power_3 = 0.8

-- Спецбоеприпас (огнемёт)
local fx_snd_4 = "weapons\\wpn_explode"
local fx_particle_4 = "1935\\explosion_01b_hot"
local explode_impulse_4 = 0.7
local explode_power_4 = 1.1

-- Аномальный боеприпас (гауссовка)
local fx_snd_5 = "anomaly\\emi_entrance"
local fx_particle_5 = "anomaly2\\plasma_generator_death"
local explode_impulse_5 = 0.5
local explode_power_5 = 1.2
-- Параметры

local current_blow_limit = -1.0 -- критическое состояние для текущего предмета
--local addon_plwpn = system_ini():r_s32("options","plwpn")

function update()
local addon_actor = db.actor
if this.load_variable("addon_opt_explw",1) == 0 and addon_actor ~= nil then
return
end
	if fx_is_enable and db.actor:alive() then
		if get_hud():GetCustomStatic("gun_jammed") and not wpn_is_jammed then
			wpn_is_jammed = true
			local active_item = db.actor:active_item()
			if active_item then -- если в руках есть предмет
				local it_id = active_item:id()
				-- теперь надо обновить его данные
				local act_it_sect = active_item:section()
				-- если это изнашиваемое оружие
				if string.find(act_it_sect, "wpn_") and
					not string.find(act_it_sect, "wpn_binoc") and
					act_it_sect ~= "wpn_crossbow"
				then
					local s_wpn = alife():object(active_item:id())
					if s_wpn then
						current_blow_limit = s_wpn.blow_cond
						if (current_blow_limit == nil) or (current_blow_limit < 0.05 or current_blow_limit > 0.25) then
							-- log1("blow_limit incorrect!")
							current_blow_limit = math.random(5, 25)*0.01
							s_wpn.blow_cond = current_blow_limit
							-- log1("blow_limit corrected ="..current_blow_limit)
						end
					end
				else -- а иначе никогда не взорвёмся
					current_blow_limit = -1
				end
				-- теперь при проверке по состоянию автоматом отсеются все предметы, кроме стволов
				-- и даже для стволов на каждом апдейте будет проверяться только состояние и ничего более
				-- log1("cond="..active_item:condition())
				-- log1("limit=".. current_blow_limit)
				if active_item:condition() < current_blow_limit then
					-- так как значение предельного состояния может быть между 0 и 1 только для
					-- стволов, то если попали сюда, то это точно ствол и можно 
					-- безбоязненно делать БУМ!
					make_boom(active_item)
				end
			end
		else
			wpn_is_jammed = false
		end
	end
end

function make_boom(act_item)
-- log1("BOOM!")

local fx_snd			-- объявляем переменные. можно не присваивать значения, так как они присвоятся обязательно
local fx_particle
local explode_impulse
local explode_power

-- определяем тип визуализации
			local act_item_sect = act_item:section()
			local type_of_visual = identy_type_of_visual(act_item_sect)
			if type_of_visual == 1 then
				fx_snd = fx_snd_1
				fx_particle = fx_particle_1
				explode_impulse = explode_impulse_1
				explode_power = explode_power_1
-- log1("Тип визуализации 1")
			elseif type_of_visual == 2 then
				fx_snd = fx_snd_2
				fx_particle = fx_particle_2
				explode_impulse = explode_impulse_2
				explode_power = explode_power_2
-- log1("Тип визуализации 2")
			elseif type_of_visual == 3 then
				fx_snd = fx_snd_3
				fx_particle = fx_particle_3
				explode_impulse = explode_impulse_3
				explode_power = explode_power_3
-- log1("Тип визуализации 3")
			elseif type_of_visual == 4 then
				fx_snd = fx_snd_4
				fx_particle = fx_particle_4
				explode_impulse = explode_impulse_4
				explode_power = explode_power_4
-- log1("Тип визуализации 4")
			elseif type_of_visual == 5 then
				fx_snd = fx_snd_5
				fx_particle = fx_particle_5
				explode_impulse = explode_impulse_5
				explode_power = explode_power_5
-- log1("Тип визуализации 5")
			end

-- визуализация
			fx_snd = xr_sound.get_safe_sound_object(fx_snd)
			fx_snd:play_no_feedback(act_item, sound_object.s3d, 0, act_item:position(), 1)
			fx_particle = particles_object(fx_particle)
			fx_particle:play_at_pos(act_item:position())

-- нанесение хита
			local explode_vec = vector():set(db.actor:position()):sub(act_item:position())
			local explode = hit()
			explode.direction = explode_vec
			explode.draftsman = db.actor
			explode.impulse = explode_impulse
			explode.power = explode_power
			explode.type = hit.explosion
			db.actor:hit(explode)

-- удаление предмета
			local wpn_to_release = alife():object(act_item:id())
			if wpn_to_release then
				alife():release(wpn_to_release, true)
			end
			-- act_item:set_condition(0.0)
			-- db.actor:drop_item(act_item)

end

function identy_type_of_visual(act_item_section)
	local type_of_visualise = 2			-- определяем тип визуализации по умолчанию на тот случай, когда тип боеприпаса не определится 
	if system_ini():line_exist(act_item_section, "ammo_class") then
		local ammo_list = system_ini():r_string(act_item_section, "ammo_class")
		if string.find(ammo_list, "ammo_9x18") or 
				string.find(ammo_list, "ammo_9x19") then
			type_of_visualise = 1
		elseif string.find(ammo_list, "ammo_5.45x39") or 
				string.find(ammo_list, "ammo_5.56x45") or 
				string.find(ammo_list, "ammo_7.62x25") or 
				string.find(ammo_list, "ammo_7.62x39") or 
				string.find(ammo_list, "ammo_7.62x51") or 
				string.find(ammo_list, "ammo_7.62x54") or 
				string.find(ammo_list, "ammo_9x39") then
			type_of_visualise = 2
		elseif string.find(ammo_list, "ammo_11.43x23") or 
				string.find(ammo_list, "ammo_12x70") or 
				string.find(ammo_list, "ammo_12x76") or 
				string.find(ammo_list, "ammo_12.7x108") then
			type_of_visualise = 3
		elseif string.find(ammo_list, "ammo_flame") or 
				string.find(ammo_list, "ammo_og-7b") then
			type_of_visualise = 4
		elseif string.find(ammo_list, "ammo_gauss") then
			type_of_visualise = 5
		end
	end
	return type_of_visualise
end

----------------------------------------------------------------
-- функции для сохранения настроек в меню

function load_variable(variable_name, value_if_not_found)
	local vn=compress_name(variable_name)
	if vn then
		return xr_logic.pstor_retrieve(db.actor, vn, value_if_not_found)
	end
end

function compress_name(name)
	return name
end

-----------------------------------------------------------------

function init()
	event("actor_update"):register(update)
end